/***************************************************************
*
file: RootJPanel.java
*
author: Oleg Tolstov
* 
author: Ning Li
*
class: CS 245
â€“
GUI
*
*
assignment: Quarter Project
*
date last modified: 3/07/2015
*
*
purpose: This program plays a game of hangman
****************************************************************/ 

package cs245project.JPanels;

import cs245project.JPanels.GameOfColorJPanel;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.Stroke;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author ningli
 */
public class SudokuJPanel extends JPanel {

    //initialize all needed variables
    private final int startScore = 540;
    private int finalScore;
    private int gridSize = 9;
    private int subGridSize = 3;
    private int cellSize = 0;
    private int boxWidth = cellSize * gridSize;
    private int boxHeight = cellSize * gridSize;
    private Color textColor = Color.BLACK;
    private Color inputColor = Color.RED;
    private Font numbersFont = new Font("MonoSpaced", Font.BOLD, 20);
    
    //initialize the textfields, puzzle right answer, and if it should be 
    //edible or not
    JTextField[][] cells = new JTextField[gridSize][gridSize];
    int[][] puzzle =
        {{8, 3, 5, 4, 1, 6, 9, 2, 7},
        {2, 9, 6, 8, 5, 7, 4, 3, 1},
        {4, 1, 7, 2, 9, 3, 6, 5, 8},
        {5, 6, 9, 1, 3, 4, 7, 8, 2},
        {1, 2, 3, 6, 7, 8, 5, 4, 9},
        {7, 4, 8, 5, 2, 9, 1, 6, 3},
        {6, 5, 2, 7, 8, 1, 3, 9, 4},
        {9, 8, 1, 3, 4, 5, 2, 7, 6},
        {3, 7, 4, 9, 6, 2, 8, 1, 5}};
    boolean[][] blank =
        {{false,true,true,  false,true,false, true,true,false},
         {true,true,true,  true,true,true,  false,true,true},
         {true,false,true,  true,true,true,  false,false,true},
         
         {false,true,false,  true,false,true,  false,false,true},
         {true,true,true,  true,false,true,  true,true,true},
         {true,false,false,  true,false,true,  false,true,false},
         
         {true,false,false,  true,true,true,  true,false,true},
         {true,true,false,  true,true,true,  true,true,true},
         {false,true,true,  false,true,false,  true,true,false}};

    /**
     * Creates new form SudokuJPanel
     */
    
    //create the board and set the according clues for the game
    public SudokuJPanel() {
        super();
        initComponents();
//        SudokuInput inputListener = new SudokuInput();
        setLayout(new GridLayout(gridSize, gridSize));
        for(int row = 0; row < gridSize; row++){
            for(int col = 0; col < gridSize; col++){
                cells[row][col] = new JTextField();
                add(cells[row][col]);
                if(blank[row][col]){
                    cells[row][col].setText("");
                    cells[row][col].setEditable(true);
                    cells[row][col].setBackground(java.awt.Color.white);
                  //  cells[row][col].addActionListener(inputListener);
                } else {
                    cells[row][col].setText(puzzle[row][col] + "");
                    cells[row][col].setEditable(false);
                    cells[row][col].setBackground(java.awt.Color.white);
                    cells[row][col].setForeground(java.awt.Color.black);
                }
                cells[row][col].setHorizontalAlignment(JTextField.CENTER);
                cells[row][col].setFont(numbersFont);
            }
        }
        setPreferredSize(new Dimension(350, 380));
        setVisible(true);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void setScore(int score){
        finalScore = score + startScore;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}