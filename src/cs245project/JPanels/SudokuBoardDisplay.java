/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package cs245project.JPanels;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.Timer;

/**
 *
 * @author ningl_000
 */
public class SudokuBoardDisplay extends JPanel implements ActionListener, KeyListener {
 
    public interface SudokuGameStateListener{
        public void onSubmitButtonPressed(int score);
        public void onCancelButtonPressed(int score);
    }
    public void setSudokuGameStateListener(SudokuGameStateListener l){
        sudokuListener = l;
    }
    
    private SudokuGameStateListener sudokuListener;
    SudokuJPanel sudoku;   
    JLabel name;
    JLabel time;
    private Timer dateTimer = new Timer(1000,this);
    JButton submit;
    JButton cancel;
    private int initialScore = 540;
    private int finalScore;
    /**
     * Creates new form SudokuBoardDisplay
     */
    public SudokuBoardDisplay() {
        super();
        //initComponents();
        mInit();
        this.setBounds(0,0,600,400);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private void mInit() {
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        sudoku = new SudokuJPanel();
        name = new JLabel();
        time = new JLabel();
        submit = new JButton();
        cancel = new JButton();
        
        name.setText("Sudoku");
        submit.setText("Submit");
        cancel.setText("Cancel");
        
        name.setBounds(20, 0, 50, 20);
        time.setBounds(470, 5, 150, 20);
        submit.setBounds(200, 340, 100, 30);
        cancel.setBounds(300, 340, 100, 30);
        sudoku.setBounds(100, 30, 400, 300);
        
        submit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if(sudokuListener!=null){
                    sudokuListener.onSubmitButtonPressed(finalScore);
                }
            }
        });
        cancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if(sudokuListener!=null){
                    sudokuListener.onCancelButtonPressed(finalScore);
                }
            }
        });
        add(name);
        add(submit);
        add(sudoku);
        add(time);
        add(cancel);
        dateTimer.start();
        revalidate();
        repaint();
        
        for(int row = 0; row < 9; row++){
            for(int col = 0; col < 9; col++) {
                if(sudoku.blank[row][col] == true) {
                    sudoku.cells[row][col].addKeyListener(this);
                }
            }
        }
    }

    public void setScore(int score){
        finalScore = score + initialScore;
    }
    
    @Override
    public void actionPerformed(ActionEvent ae) {
        time.setText(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").format(Calendar.getInstance().getTime()) );
    }
    
    
    @Override
    public void keyTyped(KeyEvent ke) {
        System.out.println("Sudoku keyTyped listener");
        for(int row = 0; row < 9; row++){
            for(int col = 0; col < 9; col++) {
                String inputText = sudoku.cells[row][col].getText();
                if(inputText == ""){
                    break;
                }
                int number = Integer.parseInt(inputText);
                if(number != 1 || number != 2 || number != 3|| number != 4 || number != 5|| number != 6 || number != 7 || number != 8 || number != 9) {
                    JOptionPane.showMessageDialog(this, "Please enter number 1-9");
                }
                if(number != sudoku.puzzle[row][col]){
                    initialScore -= 10;
                    System.out.println("-10 points");
                }
            }
        }
    }

    @Override
    public void keyPressed(KeyEvent ke) {
    }

    @Override
    public void keyReleased(KeyEvent ke) {
    }
       
}
